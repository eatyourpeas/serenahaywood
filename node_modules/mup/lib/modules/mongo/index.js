'use strict';

require('babel-polyfill');
require('source-map-support/register');

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dump = dump;
exports.help = help;
exports.logs = logs;
exports.setup = setup;
exports.start = start;
exports.stop = stop;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _nodemiral = require('nodemiral');

var _nodemiral2 = _interopRequireDefault(_nodemiral);

var _utils = require('../utils');

var _docker = require('../docker/');

var docker = _interopRequireWildcard(_docker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('mup:module:mongo');

function dump() /* api */{
  log('exec => mup mongo dump');
}

function help() /* api */{
  log('exec => mup mongo help');
}

function logs(api) {
  log('exec => mup mongo logs');

  var args = api.getArgs();
  var sessions = api.getSessions(['mongo']);
  return (0, _utils.getDockerLogs)('mongodb', sessions, args);
}

function setup(api) {
  log('exec => mup mongo setup');

  var mongoSessions = api.getSessions(['mongo']);
  var meteorSessions = api.getSessions(['meteor']);

  if (meteorSessions.length !== 1) {
    console.log('To use mup inbuilt mongodb setup, you should have only one meteor app server. To have more app servers, use an external mongodb setup');
    return;
  } else if (mongoSessions[0]._host !== meteorSessions[0]._host) {
    console.log('To use mup inbuilt mongodb setup, you should have both meteor app and mongodb on the same server');
    return;
  }

  var list = _nodemiral2.default.taskList('Setup Mongo');

  list.executeScript('setup environment', {
    script: _path2.default.resolve(__dirname, 'assets/mongo-setup.sh')
  });

  list.copy('copying mongodb.conf', {
    src: _path2.default.resolve(__dirname, 'assets/mongodb.conf'),
    dest: '/opt/mongodb/mongodb.conf'
  });

  var sessions = api.getSessions(['mongo']);

  return (0, _utils.runTaskList)(list, sessions);
}

function start(api) {
  log('exec => mup mongo start');

  var mongoSessions = api.getSessions(['mongo']);
  var meteorSessions = api.getSessions(['meteor']);

  if (meteorSessions.length !== 1 || mongoSessions[0]._host !== meteorSessions[0]._host) {
    log('Skipping mongodb start. Incompatible config');
    return;
  }

  var list = _nodemiral2.default.taskList('Start Mongo');

  list.executeScript('start mongo', {
    script: _path2.default.resolve(__dirname, 'assets/mongo-start.sh')
  });

  var sessions = api.getSessions(['mongo']);
  return (0, _utils.runTaskList)(list, sessions);
}

function stop(api) {
  log('exec => mup mongo stop');
  var list = _nodemiral2.default.taskList('Stop Mongo');

  list.executeScript('stop mongo', {
    script: _path2.default.resolve(__dirname, 'assets/mongo-stop.sh')
  });

  var sessions = api.getSessions(['mongo']);
  return (0, _utils.runTaskList)(list, sessions);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImR1bXAiLCJoZWxwIiwibG9ncyIsInNldHVwIiwic3RhcnQiLCJzdG9wIiwiZG9ja2VyIiwibG9nIiwiYXBpIiwiYXJncyIsImdldEFyZ3MiLCJzZXNzaW9ucyIsImdldFNlc3Npb25zIiwibW9uZ29TZXNzaW9ucyIsIm1ldGVvclNlc3Npb25zIiwibGVuZ3RoIiwiY29uc29sZSIsIl9ob3N0IiwibGlzdCIsInRhc2tMaXN0IiwiZXhlY3V0ZVNjcmlwdCIsInNjcmlwdCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJjb3B5Iiwic3JjIiwiZGVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFPZ0JBLEksR0FBQUEsSTtRQUlBQyxJLEdBQUFBLEk7UUFJQUMsSSxHQUFBQSxJO1FBUUFDLEssR0FBQUEsSztRQThCQUMsSyxHQUFBQSxLO1FBcUJBQyxJLEdBQUFBLEk7O0FBMUVoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7SUFBWUMsTTs7Ozs7O0FBQ1osSUFBTUMsTUFBTSxxQkFBTSxrQkFBTixDQUFaOztBQUVPLFNBQVNQLElBQVQsR0FBYyxTQUFXO0FBQzlCTyxNQUFJLHdCQUFKO0FBQ0Q7O0FBRU0sU0FBU04sSUFBVCxHQUFjLFNBQVc7QUFDOUJNLE1BQUksd0JBQUo7QUFDRDs7QUFFTSxTQUFTTCxJQUFULENBQWNNLEdBQWQsRUFBbUI7QUFDeEJELE1BQUksd0JBQUo7O0FBRUEsTUFBTUUsT0FBT0QsSUFBSUUsT0FBSixFQUFiO0FBQ0EsTUFBTUMsV0FBV0gsSUFBSUksV0FBSixDQUFnQixDQUFFLE9BQUYsQ0FBaEIsQ0FBakI7QUFDQSxTQUFPLDBCQUFjLFNBQWQsRUFBeUJELFFBQXpCLEVBQW1DRixJQUFuQyxDQUFQO0FBQ0Q7O0FBRU0sU0FBU04sS0FBVCxDQUFlSyxHQUFmLEVBQW9CO0FBQ3pCRCxNQUFJLHlCQUFKOztBQUVBLE1BQU1NLGdCQUFnQkwsSUFBSUksV0FBSixDQUFnQixDQUFFLE9BQUYsQ0FBaEIsQ0FBdEI7QUFDQSxNQUFNRSxpQkFBaUJOLElBQUlJLFdBQUosQ0FBZ0IsQ0FBRSxRQUFGLENBQWhCLENBQXZCOztBQUVBLE1BQUtFLGVBQWVDLE1BQWYsS0FBMEIsQ0FBL0IsRUFBa0M7QUFDaENDLFlBQVFULEdBQVIsQ0FBWSx1SUFBWjtBQUNBO0FBQ0QsR0FIRCxNQUdPLElBQUtNLGNBQWMsQ0FBZCxFQUFpQkksS0FBakIsS0FBMkJILGVBQWUsQ0FBZixFQUFrQkcsS0FBbEQsRUFBMEQ7QUFDL0RELFlBQVFULEdBQVIsQ0FBWSxrR0FBWjtBQUNBO0FBQ0Q7O0FBRUQsTUFBTVcsT0FBTyxvQkFBVUMsUUFBVixDQUFtQixhQUFuQixDQUFiOztBQUVBRCxPQUFLRSxhQUFMLENBQW1CLG1CQUFuQixFQUF3QztBQUN0Q0MsWUFBUSxlQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsdUJBQXhCO0FBRDhCLEdBQXhDOztBQUlBTCxPQUFLTSxJQUFMLENBQVUsc0JBQVYsRUFBa0M7QUFDaENDLFNBQUssZUFBS0gsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLHFCQUF4QixDQUQyQjtBQUVoQ0csVUFBTTtBQUYwQixHQUFsQzs7QUFLQSxNQUFNZixXQUFXSCxJQUFJSSxXQUFKLENBQWdCLENBQUUsT0FBRixDQUFoQixDQUFqQjs7QUFFQSxTQUFPLHdCQUFZTSxJQUFaLEVBQWtCUCxRQUFsQixDQUFQO0FBQ0Q7O0FBRU0sU0FBU1AsS0FBVCxDQUFlSSxHQUFmLEVBQW9CO0FBQ3pCRCxNQUFJLHlCQUFKOztBQUVBLE1BQU1NLGdCQUFnQkwsSUFBSUksV0FBSixDQUFnQixDQUFFLE9BQUYsQ0FBaEIsQ0FBdEI7QUFDQSxNQUFNRSxpQkFBaUJOLElBQUlJLFdBQUosQ0FBZ0IsQ0FBRSxRQUFGLENBQWhCLENBQXZCOztBQUVBLE1BQUtFLGVBQWVDLE1BQWYsS0FBMEIsQ0FBMUIsSUFBK0JGLGNBQWMsQ0FBZCxFQUFpQkksS0FBakIsS0FBMkJILGVBQWUsQ0FBZixFQUFrQkcsS0FBakYsRUFBd0Y7QUFDdEZWLFFBQUksNkNBQUo7QUFDQTtBQUNEOztBQUVELE1BQU1XLE9BQU8sb0JBQVVDLFFBQVYsQ0FBbUIsYUFBbkIsQ0FBYjs7QUFFQUQsT0FBS0UsYUFBTCxDQUFtQixhQUFuQixFQUFrQztBQUNoQ0MsWUFBUSxlQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsdUJBQXhCO0FBRHdCLEdBQWxDOztBQUlBLE1BQU1aLFdBQVdILElBQUlJLFdBQUosQ0FBZ0IsQ0FBRSxPQUFGLENBQWhCLENBQWpCO0FBQ0EsU0FBTyx3QkFBWU0sSUFBWixFQUFrQlAsUUFBbEIsQ0FBUDtBQUNEOztBQUVNLFNBQVNOLElBQVQsQ0FBY0csR0FBZCxFQUFtQjtBQUN4QkQsTUFBSSx3QkFBSjtBQUNBLE1BQU1XLE9BQU8sb0JBQVVDLFFBQVYsQ0FBbUIsWUFBbkIsQ0FBYjs7QUFFQUQsT0FBS0UsYUFBTCxDQUFtQixZQUFuQixFQUFpQztBQUMvQkMsWUFBUSxlQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0Isc0JBQXhCO0FBRHVCLEdBQWpDOztBQUlBLE1BQU1aLFdBQVdILElBQUlJLFdBQUosQ0FBZ0IsQ0FBRSxPQUFGLENBQWhCLENBQWpCO0FBQ0EsU0FBTyx3QkFBWU0sSUFBWixFQUFrQlAsUUFBbEIsQ0FBUDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL21hZHVzaGFuL21ldGVvci11cC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgbm9kZW1pcmFsIGZyb20gJ25vZGVtaXJhbCc7XG5pbXBvcnQge3J1blRhc2tMaXN0LCBnZXREb2NrZXJMb2dzfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgKiBhcyBkb2NrZXIgZnJvbSAnLi4vZG9ja2VyLyc7XG5jb25zdCBsb2cgPSBkZWJ1ZygnbXVwOm1vZHVsZTptb25nbycpO1xuXG5leHBvcnQgZnVuY3Rpb24gZHVtcCgvKiBhcGkgKi8pIHtcbiAgbG9nKCdleGVjID0+IG11cCBtb25nbyBkdW1wJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZWxwKC8qIGFwaSAqLykge1xuICBsb2coJ2V4ZWMgPT4gbXVwIG1vbmdvIGhlbHAnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ3MoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgbW9uZ28gbG9ncycpO1xuXG4gIGNvbnN0IGFyZ3MgPSBhcGkuZ2V0QXJncygpO1xuICBjb25zdCBzZXNzaW9ucyA9IGFwaS5nZXRTZXNzaW9ucyhbICdtb25nbycgXSk7XG4gIHJldHVybiBnZXREb2NrZXJMb2dzKCdtb25nb2RiJywgc2Vzc2lvbnMsIGFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXAoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgbW9uZ28gc2V0dXAnKTtcblxuICBjb25zdCBtb25nb1Nlc3Npb25zID0gYXBpLmdldFNlc3Npb25zKFsgJ21vbmdvJyBdKTtcbiAgY29uc3QgbWV0ZW9yU2Vzc2lvbnMgPSBhcGkuZ2V0U2Vzc2lvbnMoWyAnbWV0ZW9yJyBdKTtcblxuICBpZiAoIG1ldGVvclNlc3Npb25zLmxlbmd0aCAhPT0gMSkge1xuICAgIGNvbnNvbGUubG9nKCdUbyB1c2UgbXVwIGluYnVpbHQgbW9uZ29kYiBzZXR1cCwgeW91IHNob3VsZCBoYXZlIG9ubHkgb25lIG1ldGVvciBhcHAgc2VydmVyLiBUbyBoYXZlIG1vcmUgYXBwIHNlcnZlcnMsIHVzZSBhbiBleHRlcm5hbCBtb25nb2RiIHNldHVwJyk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCBtb25nb1Nlc3Npb25zWzBdLl9ob3N0ICE9PSBtZXRlb3JTZXNzaW9uc1swXS5faG9zdCApIHtcbiAgICBjb25zb2xlLmxvZygnVG8gdXNlIG11cCBpbmJ1aWx0IG1vbmdvZGIgc2V0dXAsIHlvdSBzaG91bGQgaGF2ZSBib3RoIG1ldGVvciBhcHAgYW5kIG1vbmdvZGIgb24gdGhlIHNhbWUgc2VydmVyJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbGlzdCA9IG5vZGVtaXJhbC50YXNrTGlzdCgnU2V0dXAgTW9uZ28nKTtcblxuICBsaXN0LmV4ZWN1dGVTY3JpcHQoJ3NldHVwIGVudmlyb25tZW50Jywge1xuICAgIHNjcmlwdDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2Fzc2V0cy9tb25nby1zZXR1cC5zaCcpXG4gIH0pO1xuXG4gIGxpc3QuY29weSgnY29weWluZyBtb25nb2RiLmNvbmYnLCB7XG4gICAgc3JjOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXNzZXRzL21vbmdvZGIuY29uZicpLFxuICAgIGRlc3Q6ICcvb3B0L21vbmdvZGIvbW9uZ29kYi5jb25mJ1xuICB9KTtcblxuICBjb25zdCBzZXNzaW9ucyA9IGFwaS5nZXRTZXNzaW9ucyhbICdtb25nbycgXSk7XG5cbiAgcmV0dXJuIHJ1blRhc2tMaXN0KGxpc3QsIHNlc3Npb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0KGFwaSkge1xuICBsb2coJ2V4ZWMgPT4gbXVwIG1vbmdvIHN0YXJ0Jyk7XG5cbiAgY29uc3QgbW9uZ29TZXNzaW9ucyA9IGFwaS5nZXRTZXNzaW9ucyhbICdtb25nbycgXSk7XG4gIGNvbnN0IG1ldGVvclNlc3Npb25zID0gYXBpLmdldFNlc3Npb25zKFsgJ21ldGVvcicgXSk7XG5cbiAgaWYgKCBtZXRlb3JTZXNzaW9ucy5sZW5ndGggIT09IDEgfHwgbW9uZ29TZXNzaW9uc1swXS5faG9zdCAhPT0gbWV0ZW9yU2Vzc2lvbnNbMF0uX2hvc3QpIHtcbiAgICBsb2coJ1NraXBwaW5nIG1vbmdvZGIgc3RhcnQuIEluY29tcGF0aWJsZSBjb25maWcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBsaXN0ID0gbm9kZW1pcmFsLnRhc2tMaXN0KCdTdGFydCBNb25nbycpO1xuXG4gIGxpc3QuZXhlY3V0ZVNjcmlwdCgnc3RhcnQgbW9uZ28nLCB7XG4gICAgc2NyaXB0OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXNzZXRzL21vbmdvLXN0YXJ0LnNoJylcbiAgfSk7XG5cbiAgY29uc3Qgc2Vzc2lvbnMgPSBhcGkuZ2V0U2Vzc2lvbnMoWyAnbW9uZ28nIF0pO1xuICByZXR1cm4gcnVuVGFza0xpc3QobGlzdCwgc2Vzc2lvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcChhcGkpIHtcbiAgbG9nKCdleGVjID0+IG11cCBtb25nbyBzdG9wJyk7XG4gIGNvbnN0IGxpc3QgPSBub2RlbWlyYWwudGFza0xpc3QoJ1N0b3AgTW9uZ28nKTtcblxuICBsaXN0LmV4ZWN1dGVTY3JpcHQoJ3N0b3AgbW9uZ28nLCB7XG4gICAgc2NyaXB0OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXNzZXRzL21vbmdvLXN0b3Auc2gnKVxuICB9KTtcblxuICBjb25zdCBzZXNzaW9ucyA9IGFwaS5nZXRTZXNzaW9ucyhbICdtb25nbycgXSk7XG4gIHJldHVybiBydW5UYXNrTGlzdChsaXN0LCBzZXNzaW9ucyk7XG59XG4iXX0=