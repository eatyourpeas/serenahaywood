'use strict';

require('babel-polyfill');
require('source-map-support/register');

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deploy = deploy;
exports.help = help;
exports.init = init;
exports.logs = logs;
exports.reconfig = reconfig;
exports.restart = restart;
exports.setup = setup;
exports.start = start;
exports.stop = stop;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _meteor = require('../meteor/');

var meteor = _interopRequireWildcard(_meteor);

var _mongo = require('../mongo/');

var mongo = _interopRequireWildcard(_mongo);

var _docker = require('../docker/');

var docker = _interopRequireWildcard(_docker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('mup:module:default');

_shelljs2.default.config.silent = true;

function deploy(api) {
  log('exec => mup deploy');
  return meteor.deploy(api);
}

function help(api) {
  log('exec => mup help');
}
function init() /* api */{
  log('exec => mup init');

  // TODO check if mup.js or settings.json files exists
  var mupJs = _path2.default.resolve(__dirname, 'template/mup.js.sample');
  var settinsJson = _path2.default.resolve(__dirname, 'template/settings.json');
  var mupJsDst = _path2.default.resolve(process.cwd(), 'mup.js');
  var settingsJsonDst = _path2.default.resolve(process.cwd(), 'settings.json');

  _shelljs2.default.cp(mupJs, mupJsDst);
  _shelljs2.default.cp(settinsJson, settingsJsonDst);
}

function logs(api) {
  log('exec => mup logs');
  return meteor.logs(api);
}

function reconfig(api) {
  log('exec => mup reconfig');
  return meteor.envconfig(api).then(function () {
    return meteor.start(api);
  });
}

function restart(api) {
  log('exec => mup restart');
  return meteor.stop(api).then(function () {
    return meteor.start(api);
  });
}

function setup(api) {
  log('exec => mup setup');
  var config = api.getConfig();
  return docker.setup(api).then(function () {
    if (config.mongo) {
      return Promise.all([meteor.setup(api), mongo.setup(api)]).then(function () {
        return mongo.start(api);
      });
    }
    return meteor.setup(api);
  });
}

function start(api) {
  log('exec => mup start');
  return meteor.start(api);
}

function stop(api) {
  log('exec => mup stop');
  return meteor.stop(api);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRlcGxveSIsImhlbHAiLCJpbml0IiwibG9ncyIsInJlY29uZmlnIiwicmVzdGFydCIsInNldHVwIiwic3RhcnQiLCJzdG9wIiwibWV0ZW9yIiwibW9uZ28iLCJkb2NrZXIiLCJsb2ciLCJjb25maWciLCJzaWxlbnQiLCJhcGkiLCJtdXBKcyIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJzZXR0aW5zSnNvbiIsIm11cEpzRHN0IiwicHJvY2VzcyIsImN3ZCIsInNldHRpbmdzSnNvbkRzdCIsImNwIiwiZW52Y29uZmlnIiwidGhlbiIsImdldENvbmZpZyIsIlByb21pc2UiLCJhbGwiXSwibWFwcGluZ3MiOiI7Ozs7O1FBVWdCQSxNLEdBQUFBLE07UUFLQUMsSSxHQUFBQSxJO1FBR0FDLEksR0FBQUEsSTtRQWFBQyxJLEdBQUFBLEk7UUFLQUMsUSxHQUFBQSxRO1FBTUFDLE8sR0FBQUEsTztRQU1BQyxLLEdBQUFBLEs7UUFnQkFDLEssR0FBQUEsSztRQUtBQyxJLEdBQUFBLEk7O0FBckVoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7SUFBWUMsTTs7QUFDWjs7SUFBWUMsSzs7QUFDWjs7SUFBWUMsTTs7Ozs7O0FBQ1osSUFBTUMsTUFBTSxxQkFBTSxvQkFBTixDQUFaOztBQUVBLGtCQUFHQyxNQUFILENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7O0FBRU8sU0FBU2QsTUFBVCxDQUFnQmUsR0FBaEIsRUFBcUI7QUFDMUJILE1BQUksb0JBQUo7QUFDQSxTQUFPSCxPQUFPVCxNQUFQLENBQWNlLEdBQWQsQ0FBUDtBQUNEOztBQUVNLFNBQVNkLElBQVQsQ0FBY2MsR0FBZCxFQUFtQjtBQUN4QkgsTUFBSSxrQkFBSjtBQUNEO0FBQ00sU0FBU1YsSUFBVCxHQUFjLFNBQVc7QUFDOUJVLE1BQUksa0JBQUo7O0FBRUE7QUFDQSxNQUFNSSxRQUFRLGVBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3Qix3QkFBeEIsQ0FBZDtBQUNBLE1BQU1DLGNBQWMsZUFBS0YsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLHdCQUF4QixDQUFwQjtBQUNBLE1BQU1FLFdBQVcsZUFBS0gsT0FBTCxDQUFhSSxRQUFRQyxHQUFSLEVBQWIsRUFBNEIsUUFBNUIsQ0FBakI7QUFDQSxNQUFNQyxrQkFBa0IsZUFBS04sT0FBTCxDQUFhSSxRQUFRQyxHQUFSLEVBQWIsRUFBNEIsZUFBNUIsQ0FBeEI7O0FBRUEsb0JBQUdFLEVBQUgsQ0FBTVIsS0FBTixFQUFhSSxRQUFiO0FBQ0Esb0JBQUdJLEVBQUgsQ0FBTUwsV0FBTixFQUFtQkksZUFBbkI7QUFDRDs7QUFFTSxTQUFTcEIsSUFBVCxDQUFjWSxHQUFkLEVBQW1CO0FBQ3hCSCxNQUFJLGtCQUFKO0FBQ0EsU0FBT0gsT0FBT04sSUFBUCxDQUFZWSxHQUFaLENBQVA7QUFDRDs7QUFFTSxTQUFTWCxRQUFULENBQWtCVyxHQUFsQixFQUF1QjtBQUM1QkgsTUFBSSxzQkFBSjtBQUNBLFNBQU9ILE9BQU9nQixTQUFQLENBQWlCVixHQUFqQixFQUNKVyxJQURJLENBQ0M7QUFBQSxXQUFNakIsT0FBT0YsS0FBUCxDQUFhUSxHQUFiLENBQU47QUFBQSxHQURELENBQVA7QUFFRDs7QUFFTSxTQUFTVixPQUFULENBQWlCVSxHQUFqQixFQUFzQjtBQUMzQkgsTUFBSSxxQkFBSjtBQUNBLFNBQU9ILE9BQU9ELElBQVAsQ0FBWU8sR0FBWixFQUNKVyxJQURJLENBQ0M7QUFBQSxXQUFNakIsT0FBT0YsS0FBUCxDQUFhUSxHQUFiLENBQU47QUFBQSxHQURELENBQVA7QUFFRDs7QUFFTSxTQUFTVCxLQUFULENBQWVTLEdBQWYsRUFBb0I7QUFDekJILE1BQUksbUJBQUo7QUFDQSxNQUFNQyxTQUFTRSxJQUFJWSxTQUFKLEVBQWY7QUFDQSxTQUFPaEIsT0FBT0wsS0FBUCxDQUFhUyxHQUFiLEVBQ0pXLElBREksQ0FDQyxZQUFNO0FBQ1YsUUFBSWIsT0FBT0gsS0FBWCxFQUFrQjtBQUNoQixhQUFPa0IsUUFBUUMsR0FBUixDQUFZLENBQ2pCcEIsT0FBT0gsS0FBUCxDQUFhUyxHQUFiLENBRGlCLEVBRWpCTCxNQUFNSixLQUFOLENBQVlTLEdBQVosQ0FGaUIsQ0FBWixFQUlKVyxJQUpJLENBSUM7QUFBQSxlQUFPaEIsTUFBTUgsS0FBTixDQUFZUSxHQUFaLENBQVA7QUFBQSxPQUpELENBQVA7QUFLRDtBQUNELFdBQU9OLE9BQU9ILEtBQVAsQ0FBYVMsR0FBYixDQUFQO0FBQ0QsR0FWSSxDQUFQO0FBV0Q7O0FBRU0sU0FBU1IsS0FBVCxDQUFlUSxHQUFmLEVBQW9CO0FBQ3pCSCxNQUFJLG1CQUFKO0FBQ0EsU0FBT0gsT0FBT0YsS0FBUCxDQUFhUSxHQUFiLENBQVA7QUFDRDs7QUFFTSxTQUFTUCxJQUFULENBQWNPLEdBQWQsRUFBbUI7QUFDeEJILE1BQUksa0JBQUo7QUFDQSxTQUFPSCxPQUFPRCxJQUFQLENBQVlPLEdBQVosQ0FBUDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL21hZHVzaGFuL21ldGVvci11cC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgc2ggZnJvbSAnc2hlbGxqcyc7XG5pbXBvcnQgKiBhcyBtZXRlb3IgZnJvbSAnLi4vbWV0ZW9yLyc7XG5pbXBvcnQgKiBhcyBtb25nbyBmcm9tICcuLi9tb25nby8nO1xuaW1wb3J0ICogYXMgZG9ja2VyIGZyb20gJy4uL2RvY2tlci8nO1xuY29uc3QgbG9nID0gZGVidWcoJ211cDptb2R1bGU6ZGVmYXVsdCcpO1xuXG5zaC5jb25maWcuc2lsZW50ID0gdHJ1ZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlcGxveShhcGkpIHtcbiAgbG9nKCdleGVjID0+IG11cCBkZXBsb3knKTtcbiAgcmV0dXJuIG1ldGVvci5kZXBsb3koYXBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhlbHAoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgaGVscCcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoLyogYXBpICovKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgaW5pdCcpO1xuXG4gIC8vIFRPRE8gY2hlY2sgaWYgbXVwLmpzIG9yIHNldHRpbmdzLmpzb24gZmlsZXMgZXhpc3RzXG4gIGNvbnN0IG11cEpzID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3RlbXBsYXRlL211cC5qcy5zYW1wbGUnKTtcbiAgY29uc3Qgc2V0dGluc0pzb24gPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAndGVtcGxhdGUvc2V0dGluZ3MuanNvbicpO1xuICBjb25zdCBtdXBKc0RzdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnbXVwLmpzJyk7XG4gIGNvbnN0IHNldHRpbmdzSnNvbkRzdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnc2V0dGluZ3MuanNvbicpO1xuXG4gIHNoLmNwKG11cEpzLCBtdXBKc0RzdCk7XG4gIHNoLmNwKHNldHRpbnNKc29uLCBzZXR0aW5nc0pzb25Ec3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9ncyhhcGkpIHtcbiAgbG9nKCdleGVjID0+IG11cCBsb2dzJyk7XG4gIHJldHVybiBtZXRlb3IubG9ncyhhcGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjb25maWcoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgcmVjb25maWcnKTtcbiAgcmV0dXJuIG1ldGVvci5lbnZjb25maWcoYXBpKVxuICAgIC50aGVuKCgpID0+IG1ldGVvci5zdGFydChhcGkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3RhcnQoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgcmVzdGFydCcpO1xuICByZXR1cm4gbWV0ZW9yLnN0b3AoYXBpKVxuICAgIC50aGVuKCgpID0+IG1ldGVvci5zdGFydChhcGkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKGFwaSkge1xuICBsb2coJ2V4ZWMgPT4gbXVwIHNldHVwJyk7XG4gIGNvbnN0IGNvbmZpZyA9IGFwaS5nZXRDb25maWcoKTtcbiAgcmV0dXJuIGRvY2tlci5zZXR1cChhcGkpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5tb25nbykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgIG1ldGVvci5zZXR1cChhcGkpLFxuICAgICAgICAgIG1vbmdvLnNldHVwKGFwaSlcbiAgICAgICAgXSlcbiAgICAgICAgICAudGhlbigoKSA9PiAobW9uZ28uc3RhcnQoYXBpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ldGVvci5zZXR1cChhcGkpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnQoYXBpKSB7XG4gIGxvZygnZXhlYyA9PiBtdXAgc3RhcnQnKTtcbiAgcmV0dXJuIG1ldGVvci5zdGFydChhcGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcChhcGkpIHtcbiAgbG9nKCdleGVjID0+IG11cCBzdG9wJyk7XG4gIHJldHVybiBtZXRlb3Iuc3RvcChhcGkpO1xufVxuIl19