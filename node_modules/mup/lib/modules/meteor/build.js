'use strict';

require('babel-polyfill');
require('source-map-support/register');

var spawn = require('child_process').spawn;
var archiver = require('archiver');
var fs = require('fs');
var pathResolve = require('path').resolve;
var _ = require('underscore');

function buildApp(appPath, buildOptions) {
  return new Promise(function (resolve, reject) {
    var callback = function callback(err) {
      if (err) {
        return reject(err);
      }
      resolve();
    };
    buildMeteorApp(appPath, buildOptions, function (code) {
      if (code === 0) {
        archiveIt(buildOptions.buildLocation, callback);
      } else {
        console.log("\n=> Build Error. Check the logs printed above.");
        callback(new Error("build-error"));
      }
    });
  });
}

function buildMeteorApp(appPath, buildOptions, callback) {
  var executable = buildOptions.executable || 'meteor';
  var args = ["build", "--directory", buildOptions.buildLocation, "--architecture", "os.linux.x86_64", "--server", "http://localhost:3000"];

  if (buildOptions.debug) {
    args.push("--debug");
  }

  if (buildOptions.mobileSettings) {
    args.push('--mobile-settings');
    args.push(JSON.stringify(buildOptions.mobileSettings));
  }

  if (buildOptions.serverOnly) {
    args.push('--server-only');
  }

  var isWin = /^win/.test(process.platform);
  if (isWin) {
    // Sometimes cmd.exe not available in the path
    // See: http://goo.gl/ADmzoD
    executable = process.env.comspec || "cmd.exe";
    args = ["/c", "meteor"].concat(args);
  }

  var options = { cwd: appPath };
  var meteor = spawn(executable, args, options);
  var stdout = "";
  var stderr = "";

  meteor.stdout.pipe(process.stdout, { end: false });
  meteor.stderr.pipe(process.stderr, { end: false });

  meteor.on('error', function (e) {
    console.log(options);
    console.log(e);
  });
  meteor.on('close', callback);
}

function archiveIt(buildLocation, callback) {
  callback = _.once(callback);
  var bundlePath = pathResolve(buildLocation, 'bundle.tar.gz');
  var sourceDir = pathResolve(buildLocation, 'bundle');

  var output = fs.createWriteStream(bundlePath);
  var archive = archiver('tar', {
    gzip: true,
    gzipOptions: {
      level: 6
    }
  });

  archive.pipe(output);
  output.once('close', callback);

  archive.once('error', function (err) {
    console.log("=> Archiving failed:", err.message);
    callback(err);
  });

  archive.directory(sourceDir, 'bundle').finalize();
}

module.exports = buildApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbInNwYXduIiwicmVxdWlyZSIsImFyY2hpdmVyIiwiZnMiLCJwYXRoUmVzb2x2ZSIsInJlc29sdmUiLCJfIiwiYnVpbGRBcHAiLCJhcHBQYXRoIiwiYnVpbGRPcHRpb25zIiwiUHJvbWlzZSIsInJlamVjdCIsImNhbGxiYWNrIiwiZXJyIiwiYnVpbGRNZXRlb3JBcHAiLCJjb2RlIiwiYXJjaGl2ZUl0IiwiYnVpbGRMb2NhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJFcnJvciIsImV4ZWN1dGFibGUiLCJhcmdzIiwiZGVidWciLCJwdXNoIiwibW9iaWxlU2V0dGluZ3MiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VydmVyT25seSIsImlzV2luIiwidGVzdCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImVudiIsImNvbXNwZWMiLCJjb25jYXQiLCJvcHRpb25zIiwiY3dkIiwibWV0ZW9yIiwic3Rkb3V0Iiwic3RkZXJyIiwicGlwZSIsImVuZCIsIm9uIiwiZSIsIm9uY2UiLCJidW5kbGVQYXRoIiwic291cmNlRGlyIiwib3V0cHV0IiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJhcmNoaXZlIiwiZ3ppcCIsImd6aXBPcHRpb25zIiwibGV2ZWwiLCJtZXNzYWdlIiwiZGlyZWN0b3J5IiwiZmluYWxpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVFDLFFBQVEsZUFBUixFQUF5QkQsS0FBckM7QUFDQSxJQUFJRSxXQUFXRCxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQUlFLEtBQUtGLFFBQVEsSUFBUixDQUFUO0FBQ0EsSUFBSUcsY0FBY0gsUUFBUSxNQUFSLEVBQWdCSSxPQUFsQztBQUNBLElBQUlDLElBQUlMLFFBQVEsWUFBUixDQUFSOztBQUVBLFNBQVNNLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCQyxZQUEzQixFQUF5QztBQUN2QyxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDTCxPQUFELEVBQVVN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RmUsR0FBaEIsQ0FBZDs7QUFPQUgsVUFBUVQsSUFBUixDQUFhTyxNQUFiO0FBQ0FBLFNBQU9ILElBQVAsQ0FBWSxPQUFaLEVBQXFCakMsUUFBckI7O0FBRUFzQyxVQUFRTCxJQUFSLENBQWEsT0FBYixFQUFzQixVQUFTaEMsR0FBVCxFQUFjO0FBQ2xDSyxZQUFRQyxHQUFSLENBQVksc0JBQVosRUFBb0NOLElBQUl5QyxPQUF4QztBQUNBMUMsYUFBU0MsR0FBVDtBQUNELEdBSEQ7O0FBS0FxQyxVQUFRSyxTQUFSLENBQWtCUixTQUFsQixFQUE2QixRQUE3QixFQUF1Q1MsUUFBdkM7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQm5ELFFBQWpCIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL21hZHVzaGFuL21ldGVvci11cC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd247XG52YXIgYXJjaGl2ZXIgPSByZXF1aXJlKCdhcmNoaXZlcicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoUmVzb2x2ZSA9IHJlcXVpcmUoJ3BhdGgnKS5yZXNvbHZlO1xudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbmZ1bmN0aW9uIGJ1aWxkQXBwKGFwcFBhdGgsIGJ1aWxkT3B0aW9ucykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgaWYoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuICAgIGJ1aWxkTWV0ZW9yQXBwKGFwcFBhdGgsIGJ1aWxkT3B0aW9ucywgZnVuY3Rpb24oY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgYXJjaGl2ZUl0KGJ1aWxkT3B0aW9ucy5idWlsZExvY2F0aW9uLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbj0+IEJ1aWxkIEVycm9yLiBDaGVjayB0aGUgbG9ncyBwcmludGVkIGFib3ZlLlwiKTtcbiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKFwiYnVpbGQtZXJyb3JcIikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRNZXRlb3JBcHAoYXBwUGF0aCwgYnVpbGRPcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgZXhlY3V0YWJsZSA9IGJ1aWxkT3B0aW9ucy5leGVjdXRhYmxlIHx8ICdtZXRlb3InO1xuICB2YXIgYXJncyA9IFtcbiAgICBcImJ1aWxkXCIsIFwiLS1kaXJlY3RvcnlcIiwgYnVpbGRPcHRpb25zLmJ1aWxkTG9jYXRpb24sXG4gICAgXCItLWFyY2hpdGVjdHVyZVwiLCBcIm9zLmxpbnV4Lng4Nl82NFwiLFxuICAgIFwiLS1zZXJ2ZXJcIiwgXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIlxuICBdO1xuXG4gIGlmKGJ1aWxkT3B0aW9ucy5kZWJ1Zykge1xuICAgIGFyZ3MucHVzaChcIi0tZGVidWdcIik7XG4gIH1cblxuICBpZihidWlsZE9wdGlvbnMubW9iaWxlU2V0dGluZ3MpIHtcbiAgICBhcmdzLnB1c2goJy0tbW9iaWxlLXNldHRpbmdzJyk7XG4gICAgYXJncy5wdXNoKEpTT04uc3RyaW5naWZ5KGJ1aWxkT3B0aW9ucy5tb2JpbGVTZXR0aW5ncykpO1xuICB9XG5cbiAgaWYoYnVpbGRPcHRpb25zLnNlcnZlck9ubHkpIHtcbiAgICBhcmdzLnB1c2goJy0tc2VydmVyLW9ubHknKTtcbiAgfVxuXG4gIHZhciBpc1dpbiA9IC9ed2luLy50ZXN0KHByb2Nlc3MucGxhdGZvcm0pO1xuICBpZihpc1dpbikge1xuICAgIC8vIFNvbWV0aW1lcyBjbWQuZXhlIG5vdCBhdmFpbGFibGUgaW4gdGhlIHBhdGhcbiAgICAvLyBTZWU6IGh0dHA6Ly9nb28uZ2wvQURtem9EXG4gICAgZXhlY3V0YWJsZSA9IHByb2Nlc3MuZW52LmNvbXNwZWMgfHwgXCJjbWQuZXhlXCI7XG4gICAgYXJncyA9IFtcIi9jXCIsIFwibWV0ZW9yXCJdLmNvbmNhdChhcmdzKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge2N3ZDogYXBwUGF0aH07XG4gIHZhciBtZXRlb3IgPSBzcGF3bihleGVjdXRhYmxlLCBhcmdzLCBvcHRpb25zKTtcbiAgdmFyIHN0ZG91dCA9IFwiXCI7XG4gIHZhciBzdGRlcnIgPSBcIlwiO1xuXG4gIG1ldGVvci5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCwge2VuZDogZmFsc2V9KTtcbiAgbWV0ZW9yLnN0ZGVyci5waXBlKHByb2Nlc3Muc3RkZXJyLCB7ZW5kOiBmYWxzZX0pO1xuXG4gIG1ldGVvci5vbignZXJyb3InLCAoZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICB9KTtcbiAgbWV0ZW9yLm9uKCdjbG9zZScsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gYXJjaGl2ZUl0KGJ1aWxkTG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gXy5vbmNlKGNhbGxiYWNrKTtcbiAgdmFyIGJ1bmRsZVBhdGggPSBwYXRoUmVzb2x2ZShidWlsZExvY2F0aW9uLCAnYnVuZGxlLnRhci5neicpO1xuICB2YXIgc291cmNlRGlyID0gcGF0aFJlc29sdmUoYnVpbGRMb2NhdGlvbiwgJ2J1bmRsZScpO1xuXG4gIHZhciBvdXRwdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShidW5kbGVQYXRoKTtcbiAgdmFyIGFyY2hpdmUgPSBhcmNoaXZlcigndGFyJywge1xuICAgIGd6aXA6IHRydWUsXG4gICAgZ3ppcE9wdGlvbnM6IHtcbiAgICAgIGxldmVsOiA2XG4gICAgfVxuICB9KTtcblxuICBhcmNoaXZlLnBpcGUob3V0cHV0KTtcbiAgb3V0cHV0Lm9uY2UoJ2Nsb3NlJywgY2FsbGJhY2spO1xuXG4gIGFyY2hpdmUub25jZSgnZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIj0+IEFyY2hpdmluZyBmYWlsZWQ6XCIsIGVyci5tZXNzYWdlKTtcbiAgICBjYWxsYmFjayhlcnIpO1xuICB9KTtcblxuICBhcmNoaXZlLmRpcmVjdG9yeShzb3VyY2VEaXIsICdidW5kbGUnKS5maW5hbGl6ZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkQXBwO1xuIl19