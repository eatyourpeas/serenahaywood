'use strict';

require('babel-polyfill');
require('source-map-support/register');

var _modules = require('./modules/');

var _modules2 = _interopRequireDefault(_modules);

var _mupApi = require('./mup-api');

var _mupApi2 = _interopRequireDefault(_mupApi);

var _updates = require('./updates');

var _updates2 = _interopRequireDefault(_updates);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var settingsPath = void 0;
var configPath = void 0;
var args = process.argv.slice(2);

_commander2.default.arguments('<arg> [subarg]').action(argAction).option('--settings <filePath>', 'Meteor settings file', setSettingsPath).option('--config <filePath>', 'mup.js config file', setConfigPath).parse(process.argv);

function argAction(arg, subarg) {

  var moduleArg = arg;
  var command = subarg;

  if (!command && !_modules2.default[moduleArg]) {
    command = moduleArg;
    moduleArg = 'default';
  }

  var module = void 0;

  if (_modules2.default[moduleArg]) {
    module = _modules2.default[moduleArg];
  } else {
    console.error('No such module');
  }

  if (!command) {
    module.help(args);
    process.exit(0);
  }

  if (!module[command]) {
    console.error('error: unknown command %s', command);
    module.help(args);
    process.exit(1);
  }

  if (_commander2.default.settings) {
    args.splice(0, 2);
  }

  if (_commander2.default.config) {
    args.splice(0, 2);
  }

  (0, _updates2.default)().then(function () {
    var base = process.cwd();
    var api = new _mupApi2.default(base, args, configPath, settingsPath);
    module[command](api);
  });
}

function handleErrors(e) {
  console.log(e.name, e.message);
  process.exit(1);
}

function setSettingsPath(settingsPathArg) {
  settingsPath = settingsPathArg;
}

function setConfigPath(configPathArg) {
  configPath = configPathArg;
}

process.on('uncaughtException', handleErrors);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNldHRpbmdzUGF0aCIsImNvbmZpZ1BhdGgiLCJhcmdzIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsImFyZ3VtZW50cyIsImFjdGlvbiIsImFyZ0FjdGlvbiIsIm9wdGlvbiIsInNldFNldHRpbmdzUGF0aCIsInNldENvbmZpZ1BhdGgiLCJwYXJzZSIsImFyZyIsInN1YmFyZyIsIm1vZHVsZUFyZyIsImNvbW1hbmQiLCJtb2R1bGUiLCJjb25zb2xlIiwiZXJyb3IiLCJoZWxwIiwiZXhpdCIsInNldHRpbmdzIiwic3BsaWNlIiwiY29uZmlnIiwidGhlbiIsImJhc2UiLCJjd2QiLCJhcGkiLCJoYW5kbGVFcnJvcnMiLCJlIiwibG9nIiwibmFtZSIsIm1lc3NhZ2UiLCJzZXR0aW5nc1BhdGhBcmciLCJjb25maWdQYXRoQXJnIiwib24iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLHFCQUFKO0FBQ0EsSUFBSUMsbUJBQUo7QUFDQSxJQUFNQyxPQUFPQyxRQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBYjs7QUFFQSxvQkFDR0MsU0FESCxDQUNhLGdCQURiLEVBRUdDLE1BRkgsQ0FFVUMsU0FGVixFQUdHQyxNQUhILENBR1UsdUJBSFYsRUFHbUMsc0JBSG5DLEVBRzJEQyxlQUgzRCxFQUlHRCxNQUpILENBSVUscUJBSlYsRUFJaUMsb0JBSmpDLEVBSXVERSxhQUp2RCxFQUtHQyxLQUxILENBS1NULFFBQVFDLElBTGpCOztBQU9BLFNBQVNJLFNBQVQsQ0FBbUJLLEdBQW5CLEVBQXdCQyxNQUF4QixFQUFnQzs7QUFFOUIsTUFBSUMsWUFBWUYsR0FBaEI7QUFDQSxNQUFJRyxVQUFVRixNQUFkOztBQUVBLE1BQUcsQ0FBQ0UsT0FBRCxJQUFZLENBQUMsa0JBQVFELFNBQVIsQ0FBaEIsRUFBb0M7QUFDbENDLGNBQVVELFNBQVY7QUFDQUEsZ0JBQVksU0FBWjtBQUNEOztBQUVELE1BQUlFLGVBQUo7O0FBRUEsTUFBRyxrQkFBUUYsU0FBUixDQUFILEVBQXVCO0FBQ3JCRSxhQUFTLGtCQUFRRixTQUFSLENBQVQ7QUFDRCxHQUZELE1BRU87QUFDTEcsWUFBUUMsS0FBUixDQUFjLGdCQUFkO0FBQ0Q7O0FBRUQsTUFBRyxDQUFDSCxPQUFKLEVBQWE7QUFDWEMsV0FBT0csSUFBUCxDQUFZbEIsSUFBWjtBQUNBQyxZQUFRa0IsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRCxNQUFJLENBQUNKLE9BQU9ELE9BQVAsQ0FBTCxFQUFzQjtBQUNwQkUsWUFBUUMsS0FBUixDQUFjLDJCQUFkLEVBQTJDSCxPQUEzQztBQUNBQyxXQUFPRyxJQUFQLENBQVlsQixJQUFaO0FBQ0FDLFlBQVFrQixJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELE1BQUcsb0JBQVFDLFFBQVgsRUFBcUI7QUFDbkJwQixTQUFLcUIsTUFBTCxDQUFZLENBQVosRUFBZSxDQUFmO0FBQ0Q7O0FBRUQsTUFBRyxvQkFBUUMsTUFBWCxFQUFtQjtBQUNqQnRCLFNBQUtxQixNQUFMLENBQVksQ0FBWixFQUFlLENBQWY7QUFDRDs7QUFFRCwyQkFBZUUsSUFBZixDQUFvQixZQUFNO0FBQ3hCLFFBQU1DLE9BQU92QixRQUFRd0IsR0FBUixFQUFiO0FBQ0EsUUFBTUMsTUFBTSxxQkFBV0YsSUFBWCxFQUFpQnhCLElBQWpCLEVBQXVCRCxVQUF2QixFQUFtQ0QsWUFBbkMsQ0FBWjtBQUNBaUIsV0FBT0QsT0FBUCxFQUFnQlksR0FBaEI7QUFDRCxHQUpEO0FBS0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkJaLFVBQVFhLEdBQVIsQ0FBWUQsRUFBRUUsSUFBZCxFQUFvQkYsRUFBRUcsT0FBdEI7QUFDQTlCLFVBQVFrQixJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELFNBQVNYLGVBQVQsQ0FBeUJ3QixlQUF6QixFQUEwQztBQUN4Q2xDLGlCQUFla0MsZUFBZjtBQUNEOztBQUVELFNBQVN2QixhQUFULENBQXVCd0IsYUFBdkIsRUFBc0M7QUFDcENsQyxlQUFha0MsYUFBYjtBQUNEOztBQUVEaEMsUUFBUWlDLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQ1AsWUFBaEMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbWFkdXNoYW4vbWV0ZW9yLXVwL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2R1bGVzIGZyb20gJy4vbW9kdWxlcy8nO1xuaW1wb3J0IE11cEFQSSBmcm9tICcuL211cC1hcGknO1xuaW1wb3J0IGNoZWNrVXBkYXRlcyBmcm9tICcuL3VwZGF0ZXMnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcblxubGV0IHNldHRpbmdzUGF0aDtcbmxldCBjb25maWdQYXRoO1xuY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxucHJvZ3JhbVxuICAuYXJndW1lbnRzKCc8YXJnPiBbc3ViYXJnXScpXG4gIC5hY3Rpb24oYXJnQWN0aW9uKVxuICAub3B0aW9uKCctLXNldHRpbmdzIDxmaWxlUGF0aD4nLCAnTWV0ZW9yIHNldHRpbmdzIGZpbGUnLCBzZXRTZXR0aW5nc1BhdGgpXG4gIC5vcHRpb24oJy0tY29uZmlnIDxmaWxlUGF0aD4nLCAnbXVwLmpzIGNvbmZpZyBmaWxlJywgc2V0Q29uZmlnUGF0aClcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmZ1bmN0aW9uIGFyZ0FjdGlvbihhcmcsIHN1YmFyZykge1xuXG4gIGxldCBtb2R1bGVBcmcgPSBhcmc7XG4gIGxldCBjb21tYW5kID0gc3ViYXJnO1xuXG4gIGlmKCFjb21tYW5kICYmICFtb2R1bGVzW21vZHVsZUFyZ10pIHtcbiAgICBjb21tYW5kID0gbW9kdWxlQXJnO1xuICAgIG1vZHVsZUFyZyA9ICdkZWZhdWx0JztcbiAgfVxuXG4gIGxldCBtb2R1bGU7XG5cbiAgaWYobW9kdWxlc1ttb2R1bGVBcmddKSB7XG4gICAgbW9kdWxlID0gbW9kdWxlc1ttb2R1bGVBcmddO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ05vIHN1Y2ggbW9kdWxlJyk7XG4gIH1cblxuICBpZighY29tbWFuZCkge1xuICAgIG1vZHVsZS5oZWxwKGFyZ3MpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfVxuXG4gIGlmICghbW9kdWxlW2NvbW1hbmRdKSB7XG4gICAgY29uc29sZS5lcnJvcignZXJyb3I6IHVua25vd24gY29tbWFuZCAlcycsIGNvbW1hbmQpO1xuICAgIG1vZHVsZS5oZWxwKGFyZ3MpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIGlmKHByb2dyYW0uc2V0dGluZ3MpIHtcbiAgICBhcmdzLnNwbGljZSgwLCAyKTtcbiAgfVxuXG4gIGlmKHByb2dyYW0uY29uZmlnKSB7XG4gICAgYXJncy5zcGxpY2UoMCwgMik7XG4gIH1cblxuICBjaGVja1VwZGF0ZXMoKS50aGVuKCgpID0+IHtcbiAgICBjb25zdCBiYXNlID0gcHJvY2Vzcy5jd2QoKTtcbiAgICBjb25zdCBhcGkgPSBuZXcgTXVwQVBJKGJhc2UsIGFyZ3MsIGNvbmZpZ1BhdGgsIHNldHRpbmdzUGF0aCk7XG4gICAgbW9kdWxlW2NvbW1hbmRdKGFwaSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVFcnJvcnMoZSkge1xuICBjb25zb2xlLmxvZyhlLm5hbWUsIGUubWVzc2FnZSk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuZnVuY3Rpb24gc2V0U2V0dGluZ3NQYXRoKHNldHRpbmdzUGF0aEFyZykge1xuICBzZXR0aW5nc1BhdGggPSBzZXR0aW5nc1BhdGhBcmc7XG59XG5cbmZ1bmN0aW9uIHNldENvbmZpZ1BhdGgoY29uZmlnUGF0aEFyZykge1xuICBjb25maWdQYXRoID0gY29uZmlnUGF0aEFyZztcbn1cblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBoYW5kbGVFcnJvcnMpO1xuIl19